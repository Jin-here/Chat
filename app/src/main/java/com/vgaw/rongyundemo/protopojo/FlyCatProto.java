// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flycat.proto

package com.vgaw.rongyundemo.protopojo;

public final class FlyCatProto {
  private FlyCatProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FlyCatOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 flag = 1;
    /**
     * <code>required int32 flag = 1;</code>
     */
    boolean hasFlag();
    /**
     * <code>required int32 flag = 1;</code>
     */
    int getFlag();

    // repeated bool boolV = 2 [packed = true];
    /**
     * <code>repeated bool boolV = 2 [packed = true];</code>
     */
    java.util.List<Boolean> getBoolVList();
    /**
     * <code>repeated bool boolV = 2 [packed = true];</code>
     */
    int getBoolVCount();
    /**
     * <code>repeated bool boolV = 2 [packed = true];</code>
     */
    boolean getBoolV(int index);

    // repeated double doubleV = 3 [packed = true];
    /**
     * <code>repeated double doubleV = 3 [packed = true];</code>
     */
    java.util.List<Double> getDoubleVList();
    /**
     * <code>repeated double doubleV = 3 [packed = true];</code>
     */
    int getDoubleVCount();
    /**
     * <code>repeated double doubleV = 3 [packed = true];</code>
     */
    double getDoubleV(int index);

    // repeated int32 intV = 4 [packed = true];
    /**
     * <code>repeated int32 intV = 4 [packed = true];</code>
     */
    java.util.List<Integer> getIntVList();
    /**
     * <code>repeated int32 intV = 4 [packed = true];</code>
     */
    int getIntVCount();
    /**
     * <code>repeated int32 intV = 4 [packed = true];</code>
     */
    int getIntV(int index);

    // repeated int64 longV = 5 [packed = true];
    /**
     * <code>repeated int64 longV = 5 [packed = true];</code>
     */
    java.util.List<Long> getLongVList();
    /**
     * <code>repeated int64 longV = 5 [packed = true];</code>
     */
    int getLongVCount();
    /**
     * <code>repeated int64 longV = 5 [packed = true];</code>
     */
    long getLongV(int index);

    // repeated string stringV = 6;
    /**
     * <code>repeated string stringV = 6;</code>
     */
    java.util.List<String>
    getStringVList();
    /**
     * <code>repeated string stringV = 6;</code>
     */
    int getStringVCount();
    /**
     * <code>repeated string stringV = 6;</code>
     */
    String getStringV(int index);
    /**
     * <code>repeated string stringV = 6;</code>
     */
    com.google.protobuf.ByteString
        getStringVBytes(int index);
  }
  /**
   * Protobuf type {@code vgaw.FlyCat}
   */
  public static final class FlyCat extends
      com.google.protobuf.GeneratedMessage
      implements FlyCatOrBuilder {
    // Use FlyCat.newBuilder() to construct.
    private FlyCat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FlyCat(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FlyCat defaultInstance;
    public static FlyCat getDefaultInstance() {
      return defaultInstance;
    }

    public FlyCat getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FlyCat(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flag_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                boolV_ = new java.util.ArrayList<Boolean>();
                mutable_bitField0_ |= 0x00000002;
              }
              boolV_.add(input.readBool());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                boolV_ = new java.util.ArrayList<Boolean>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                boolV_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                doubleV_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000004;
              }
              doubleV_.add(input.readDouble());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                doubleV_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleV_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                intV_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              intV_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                intV_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                intV_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                longV_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x00000010;
              }
              longV_.add(input.readInt64());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                longV_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                longV_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                stringV_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000020;
              }
              stringV_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          boolV_ = java.util.Collections.unmodifiableList(boolV_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          doubleV_ = java.util.Collections.unmodifiableList(doubleV_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          intV_ = java.util.Collections.unmodifiableList(intV_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          longV_ = java.util.Collections.unmodifiableList(longV_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          stringV_ = new com.google.protobuf.UnmodifiableLazyStringList(stringV_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return FlyCatProto.internal_static_vgaw_FlyCat_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return FlyCatProto.internal_static_vgaw_FlyCat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FlyCat.class, Builder.class);
    }

    public static com.google.protobuf.Parser<FlyCat> PARSER =
        new com.google.protobuf.AbstractParser<FlyCat>() {
      public FlyCat parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlyCat(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<FlyCat> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 flag = 1;
    public static final int FLAG_FIELD_NUMBER = 1;
    private int flag_;
    /**
     * <code>required int32 flag = 1;</code>
     */
    public boolean hasFlag() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 flag = 1;</code>
     */
    public int getFlag() {
      return flag_;
    }

    // repeated bool boolV = 2 [packed = true];
    public static final int BOOLV_FIELD_NUMBER = 2;
    private java.util.List<Boolean> boolV_;
    /**
     * <code>repeated bool boolV = 2 [packed = true];</code>
     */
    public java.util.List<Boolean>
        getBoolVList() {
      return boolV_;
    }
    /**
     * <code>repeated bool boolV = 2 [packed = true];</code>
     */
    public int getBoolVCount() {
      return boolV_.size();
    }
    /**
     * <code>repeated bool boolV = 2 [packed = true];</code>
     */
    public boolean getBoolV(int index) {
      return boolV_.get(index);
    }
    private int boolVMemoizedSerializedSize = -1;

    // repeated double doubleV = 3 [packed = true];
    public static final int DOUBLEV_FIELD_NUMBER = 3;
    private java.util.List<Double> doubleV_;
    /**
     * <code>repeated double doubleV = 3 [packed = true];</code>
     */
    public java.util.List<Double>
        getDoubleVList() {
      return doubleV_;
    }
    /**
     * <code>repeated double doubleV = 3 [packed = true];</code>
     */
    public int getDoubleVCount() {
      return doubleV_.size();
    }
    /**
     * <code>repeated double doubleV = 3 [packed = true];</code>
     */
    public double getDoubleV(int index) {
      return doubleV_.get(index);
    }
    private int doubleVMemoizedSerializedSize = -1;

    // repeated int32 intV = 4 [packed = true];
    public static final int INTV_FIELD_NUMBER = 4;
    private java.util.List<Integer> intV_;
    /**
     * <code>repeated int32 intV = 4 [packed = true];</code>
     */
    public java.util.List<Integer>
        getIntVList() {
      return intV_;
    }
    /**
     * <code>repeated int32 intV = 4 [packed = true];</code>
     */
    public int getIntVCount() {
      return intV_.size();
    }
    /**
     * <code>repeated int32 intV = 4 [packed = true];</code>
     */
    public int getIntV(int index) {
      return intV_.get(index);
    }
    private int intVMemoizedSerializedSize = -1;

    // repeated int64 longV = 5 [packed = true];
    public static final int LONGV_FIELD_NUMBER = 5;
    private java.util.List<Long> longV_;
    /**
     * <code>repeated int64 longV = 5 [packed = true];</code>
     */
    public java.util.List<Long>
        getLongVList() {
      return longV_;
    }
    /**
     * <code>repeated int64 longV = 5 [packed = true];</code>
     */
    public int getLongVCount() {
      return longV_.size();
    }
    /**
     * <code>repeated int64 longV = 5 [packed = true];</code>
     */
    public long getLongV(int index) {
      return longV_.get(index);
    }
    private int longVMemoizedSerializedSize = -1;

    // repeated string stringV = 6;
    public static final int STRINGV_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList stringV_;
    /**
     * <code>repeated string stringV = 6;</code>
     */
    public java.util.List<String>
        getStringVList() {
      return stringV_;
    }
    /**
     * <code>repeated string stringV = 6;</code>
     */
    public int getStringVCount() {
      return stringV_.size();
    }
    /**
     * <code>repeated string stringV = 6;</code>
     */
    public String getStringV(int index) {
      return stringV_.get(index);
    }
    /**
     * <code>repeated string stringV = 6;</code>
     */
    public com.google.protobuf.ByteString
        getStringVBytes(int index) {
      return stringV_.getByteString(index);
    }

    private void initFields() {
      flag_ = 0;
      boolV_ = java.util.Collections.emptyList();
      doubleV_ = java.util.Collections.emptyList();
      intV_ = java.util.Collections.emptyList();
      longV_ = java.util.Collections.emptyList();
      stringV_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasFlag()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flag_);
      }
      if (getBoolVList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(boolVMemoizedSerializedSize);
      }
      for (int i = 0; i < boolV_.size(); i++) {
        output.writeBoolNoTag(boolV_.get(i));
      }
      if (getDoubleVList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(doubleVMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleV_.size(); i++) {
        output.writeDoubleNoTag(doubleV_.get(i));
      }
      if (getIntVList().size() > 0) {
        output.writeRawVarint32(34);
        output.writeRawVarint32(intVMemoizedSerializedSize);
      }
      for (int i = 0; i < intV_.size(); i++) {
        output.writeInt32NoTag(intV_.get(i));
      }
      if (getLongVList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(longVMemoizedSerializedSize);
      }
      for (int i = 0; i < longV_.size(); i++) {
        output.writeInt64NoTag(longV_.get(i));
      }
      for (int i = 0; i < stringV_.size(); i++) {
        output.writeBytes(6, stringV_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, flag_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getBoolVList().size();
        size += dataSize;
        if (!getBoolVList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        boolVMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleVList().size();
        size += dataSize;
        if (!getDoubleVList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleVMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < intV_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(intV_.get(i));
        }
        size += dataSize;
        if (!getIntVList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        intVMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < longV_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(longV_.get(i));
        }
        size += dataSize;
        if (!getLongVList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        longVMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringV_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stringV_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getStringVList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static FlyCat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FlyCat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FlyCat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FlyCat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FlyCat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static FlyCat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static FlyCat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static FlyCat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static FlyCat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static FlyCat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(FlyCat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code vgaw.FlyCat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements FlyCatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return FlyCatProto.internal_static_vgaw_FlyCat_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return FlyCatProto.internal_static_vgaw_FlyCat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FlyCat.class, Builder.class);
      }

      // Construct using com.vgaw.netty.protopojo.FlyCatProto.FlyCat.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        boolV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        doubleV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        intV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        longV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        stringV_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return FlyCatProto.internal_static_vgaw_FlyCat_descriptor;
      }

      public FlyCat getDefaultInstanceForType() {
        return FlyCat.getDefaultInstance();
      }

      public FlyCat build() {
        FlyCat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public FlyCat buildPartial() {
        FlyCat result = new FlyCat(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flag_ = flag_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          boolV_ = java.util.Collections.unmodifiableList(boolV_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.boolV_ = boolV_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          doubleV_ = java.util.Collections.unmodifiableList(doubleV_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.doubleV_ = doubleV_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          intV_ = java.util.Collections.unmodifiableList(intV_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.intV_ = intV_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          longV_ = java.util.Collections.unmodifiableList(longV_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.longV_ = longV_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          stringV_ = new com.google.protobuf.UnmodifiableLazyStringList(
              stringV_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.stringV_ = stringV_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof FlyCat) {
          return mergeFrom((FlyCat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FlyCat other) {
        if (other == FlyCat.getDefaultInstance()) return this;
        if (other.hasFlag()) {
          setFlag(other.getFlag());
        }
        if (!other.boolV_.isEmpty()) {
          if (boolV_.isEmpty()) {
            boolV_ = other.boolV_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBoolVIsMutable();
            boolV_.addAll(other.boolV_);
          }
          onChanged();
        }
        if (!other.doubleV_.isEmpty()) {
          if (doubleV_.isEmpty()) {
            doubleV_ = other.doubleV_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDoubleVIsMutable();
            doubleV_.addAll(other.doubleV_);
          }
          onChanged();
        }
        if (!other.intV_.isEmpty()) {
          if (intV_.isEmpty()) {
            intV_ = other.intV_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureIntVIsMutable();
            intV_.addAll(other.intV_);
          }
          onChanged();
        }
        if (!other.longV_.isEmpty()) {
          if (longV_.isEmpty()) {
            longV_ = other.longV_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLongVIsMutable();
            longV_.addAll(other.longV_);
          }
          onChanged();
        }
        if (!other.stringV_.isEmpty()) {
          if (stringV_.isEmpty()) {
            stringV_ = other.stringV_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureStringVIsMutable();
            stringV_.addAll(other.stringV_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFlag()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FlyCat parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FlyCat) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 flag = 1;
      private int flag_ ;
      /**
       * <code>required int32 flag = 1;</code>
       */
      public boolean hasFlag() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 flag = 1;</code>
       */
      public int getFlag() {
        return flag_;
      }
      /**
       * <code>required int32 flag = 1;</code>
       */
      public Builder setFlag(int value) {
        bitField0_ |= 0x00000001;
        flag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 flag = 1;</code>
       */
      public Builder clearFlag() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flag_ = 0;
        onChanged();
        return this;
      }

      // repeated bool boolV = 2 [packed = true];
      private java.util.List<Boolean> boolV_ = java.util.Collections.emptyList();
      private void ensureBoolVIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          boolV_ = new java.util.ArrayList<Boolean>(boolV_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public java.util.List<Boolean>
          getBoolVList() {
        return java.util.Collections.unmodifiableList(boolV_);
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public int getBoolVCount() {
        return boolV_.size();
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public boolean getBoolV(int index) {
        return boolV_.get(index);
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public Builder setBoolV(
          int index, boolean value) {
        ensureBoolVIsMutable();
        boolV_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public Builder addBoolV(boolean value) {
        ensureBoolVIsMutable();
        boolV_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public Builder addAllBoolV(
          Iterable<? extends Boolean> values) {
        ensureBoolVIsMutable();
        super.addAll(values, boolV_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool boolV = 2 [packed = true];</code>
       */
      public Builder clearBoolV() {
        boolV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated double doubleV = 3 [packed = true];
      private java.util.List<Double> doubleV_ = java.util.Collections.emptyList();
      private void ensureDoubleVIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          doubleV_ = new java.util.ArrayList<Double>(doubleV_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public java.util.List<Double>
          getDoubleVList() {
        return java.util.Collections.unmodifiableList(doubleV_);
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public int getDoubleVCount() {
        return doubleV_.size();
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public double getDoubleV(int index) {
        return doubleV_.get(index);
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public Builder setDoubleV(
          int index, double value) {
        ensureDoubleVIsMutable();
        doubleV_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public Builder addDoubleV(double value) {
        ensureDoubleVIsMutable();
        doubleV_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public Builder addAllDoubleV(
          Iterable<? extends Double> values) {
        ensureDoubleVIsMutable();
        super.addAll(values, doubleV_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubleV = 3 [packed = true];</code>
       */
      public Builder clearDoubleV() {
        doubleV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 intV = 4 [packed = true];
      private java.util.List<Integer> intV_ = java.util.Collections.emptyList();
      private void ensureIntVIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          intV_ = new java.util.ArrayList<Integer>(intV_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public java.util.List<Integer>
          getIntVList() {
        return java.util.Collections.unmodifiableList(intV_);
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public int getIntVCount() {
        return intV_.size();
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public int getIntV(int index) {
        return intV_.get(index);
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public Builder setIntV(
          int index, int value) {
        ensureIntVIsMutable();
        intV_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public Builder addIntV(int value) {
        ensureIntVIsMutable();
        intV_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public Builder addAllIntV(
          Iterable<? extends Integer> values) {
        ensureIntVIsMutable();
        super.addAll(values, intV_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 intV = 4 [packed = true];</code>
       */
      public Builder clearIntV() {
        intV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated int64 longV = 5 [packed = true];
      private java.util.List<Long> longV_ = java.util.Collections.emptyList();
      private void ensureLongVIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          longV_ = new java.util.ArrayList<Long>(longV_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public java.util.List<Long>
          getLongVList() {
        return java.util.Collections.unmodifiableList(longV_);
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public int getLongVCount() {
        return longV_.size();
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public long getLongV(int index) {
        return longV_.get(index);
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public Builder setLongV(
          int index, long value) {
        ensureLongVIsMutable();
        longV_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public Builder addLongV(long value) {
        ensureLongVIsMutable();
        longV_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public Builder addAllLongV(
          Iterable<? extends Long> values) {
        ensureLongVIsMutable();
        super.addAll(values, longV_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 longV = 5 [packed = true];</code>
       */
      public Builder clearLongV() {
        longV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated string stringV = 6;
      private com.google.protobuf.LazyStringList stringV_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringVIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          stringV_ = new com.google.protobuf.LazyStringArrayList(stringV_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public java.util.List<String>
          getStringVList() {
        return java.util.Collections.unmodifiableList(stringV_);
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public int getStringVCount() {
        return stringV_.size();
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public String getStringV(int index) {
        return stringV_.get(index);
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public com.google.protobuf.ByteString
          getStringVBytes(int index) {
        return stringV_.getByteString(index);
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public Builder setStringV(
          int index, String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringVIsMutable();
        stringV_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public Builder addStringV(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringVIsMutable();
        stringV_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public Builder addAllStringV(
          Iterable<String> values) {
        ensureStringVIsMutable();
        super.addAll(values, stringV_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public Builder clearStringV() {
        stringV_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stringV = 6;</code>
       */
      public Builder addStringVBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringVIsMutable();
        stringV_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:vgaw.FlyCat)
    }

    static {
      defaultInstance = new FlyCat(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:vgaw.FlyCat)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_vgaw_FlyCat_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_vgaw_FlyCat_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\014flycat.proto\022\004vgaw\"t\n\006FlyCat\022\014\n\004flag\030\001" +
      " \002(\005\022\021\n\005boolV\030\002 \003(\010B\002\020\001\022\023\n\007doubleV\030\003 \003(\001" +
      "B\002\020\001\022\020\n\004intV\030\004 \003(\005B\002\020\001\022\021\n\005longV\030\005 \003(\003B\002\020" +
      "\001\022\017\n\007stringV\030\006 \003(\tB0\n\030com.vgaw.netty.pro" +
      "topojoB\013FlyCatProto\200\001\000\210\001\000\220\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_vgaw_FlyCat_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_vgaw_FlyCat_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_vgaw_FlyCat_descriptor,
              new String[] { "Flag", "BoolV", "DoubleV", "IntV", "LongV", "StringV", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
